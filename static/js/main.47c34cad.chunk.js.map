{"version":3,"sources":["WutheringWavesEchoCalculator.jsx","App.js","reportWebVitals.js","index.js"],"names":["WutheringWavesEchoCalculator","_mainStatsByCost$echo","_mainStatsByCost$roll","colors","echoCosts","mainStatsByCost","1","3","4","allSubstats","substatRanges","values","min","max","isFlat","percentStatProbabilities","flatStatProbabilities","activeTab","setActiveTab","useState","echoCost","setEchoCost","mainStat","setMainStat","selectedSubstats","setSelectedSubstats","substatValues","setSubstatValues","results","setResults","mainStatProb","setMainStatProb","substatProb","setSubstatProb","valueProb","setValueProb","totalProb","setTotalProb","waveplateInfo","setWaveplateInfo","confidenceLevel","setConfidenceLevel","rollEchoCost","setRollEchoCost","rollMainStat","setRollMainStat","existingSubstats","setExistingSubstats","existingSubstatValues","setExistingSubstatValues","desiredSubstats","setDesiredSubstats","desiredSubstatValues","setDesiredSubstatValues","rollResults","setRollResults","rollMainStatProb","setRollMainStatProb","rollSubstatProb","setRollSubstatProb","rollValueProb","setRollValueProb","rollTotalProb","setRollTotalProb","rollWaveplateInfo","setRollWaveplateInfo","rollConfidenceLevel","setRollConfidenceLevel","useEffect","handleSubstatValueChange","stat","value","direction","arguments","length","undefined","validValues","currentValue","parseFloat","currentIndex","indexOf","newIndex","Math","closestValue","reduce","prev","curr","abs","handleExistingSubstatValueChange","handleDesiredSubstatValueChange","calculateValueProbability","probabilities","thresholdIndex","probability","i","permutation","n","k","result","formatPercent","toExponential","toFixed","getFraction","prob","round","calculateWaveplates","setWaveplateInfoFunc","confidenceLevelValue","message","confidence","failureProbability","failureThreshold","totalWaveplates","ceil","log","totalMinutes","days","floor","hours","minutes","timeString","waveplates","time","getChartData","name","substatComboProbability","valuesProbability","getRollChartData","error","CHART_COLORS","renderCustomLabel","_ref","cx","cy","midAngle","innerRadius","outerRadius","percent","index","RADIAN","PI","radius","x","cos","y","sin","React","createElement","fill","fontSize","textAnchor","dominantBaseline","getGradientColor","minProb","maxProb","normalized","adjusted","pow","percentStatsWithIndex","map","flatStatsWithIndex","sortedPercentProbs","sort","a","b","sortedFlatProbs","minPercentProb","maxPercentProb","minFlatProb","maxFlatProb","renderProbabilityBar","key","style","display","gridTemplateColumns","alignItems","gap","color","height","backgroundColor","borderRadius","position","overflow","width","textAlign","cursor","top","left","transform","padding","visibility","pointerEvents","className","fontFamily","minHeight","flexDirection","maxWidth","marginBottom","fontWeight","marginTop","justifyContent","margin","onClick","border","marginRight","flex","boxShadow","cost","onChange","e","target","maxHeight","overflowY","scrollbarWidth","msOverflowStyle","WebkitOverflowScrolling","jsx","includes","opacity","filter","s","newValues","toggleSubstat","type","marginLeft","background","calculateProbability","isMounted","mainStatCount","mainStatProbability","totalSubstatOptions","desiredCount","substatProbability","totalSequences","favorableSequences","remainingSlots","desiredValue","totalProbability","substats","cleanup","flexWrap","step","whiteSpace","ResponsiveContainer","PieChart","Pie","data","dataKey","nameKey","label","labelLine","entry","Cell","Tooltip","formatter","newDesiredValues","toggleExistingSubstat","toggleDesiredSubstat","calculateRollProbability","existingCount","remainingAfterDesired","lineHeight","_ref2","_ref3","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.47c34cad.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from 'recharts';\r\n\r\nconst WutheringWavesEchoCalculator = () => {\r\n    // Theme colors\r\n    const colors = {\r\n        background: \"#0D1117\",\r\n        cardBg: \"#161B22\",\r\n        primary: \"#58A6FF\",\r\n        primaryDark: \"#1F6FEB\",\r\n        accent: \"#7EE7B8\",\r\n        accentDark: \"#26A69A\",\r\n        text: \"#C9D1D9\",\r\n        textDark: \"#8B949E\",\r\n        limited: \"#FF79C6\",\r\n        standard: \"#8BE9FD\",\r\n        success: \"#86EFAC\",\r\n        successDark: \"#34D399\",\r\n        warning: \"#FBBF24\",\r\n        error: \"#F87171\",\r\n        progress: \"#10B981\",\r\n        inputBg: \"#1E293B\",\r\n        inputBorder: \"#3B82F6\",\r\n        scrollbarBg: \"#1F2937\",\r\n        scrollbarThumb: \"#4B5563\",\r\n        buttonBg: \"#3B82F6\",\r\n        buttonHover: \"#2563EB\",\r\n        buttonText: \"#FFFFFF\"\r\n    };\r\n\r\n    // Echo costs\r\n    const echoCosts = [1, 3, 4];\r\n\r\n    // Main stats by cost\r\n    const mainStatsByCost = {\r\n        1: [\"HP\", \"HP%\", \"ATK%\", \"DEF%\"],\r\n        3: [\"ATK\", \"HP%\", \"ATK%\", \"DEF%\", \"Aero DMG\", \"Glacio DMG\", \"Fusion DMG\", \"Electro DMG\", \"Havoc DMG\", \"Spectro DMG\", \"Energy Regen\"],\r\n        4: [\"ATK\", \"HP%\", \"ATK%\", \"DEF%\", \"CRIT Rate\", \"CRIT DMG\", \"Healing Bonus\"]\r\n    };\r\n\r\n    // All possible substats\r\n    const allSubstats = [\r\n        \"HP\", \"ATK\", \"DEF\", \"HP%\", \"ATK%\", \"DEF%\", \"CRIT Rate\", \"CRIT DMG\",\r\n        \"Energy Regen\", \"Basic Attack DMG Bonus\", \"Heavy Attack DMG Bonus\",\r\n        \"Resonance Skill DMG Bonus\", \"Resonance Liberation DMG Bonus\"\r\n    ];\r\n\r\n    // Substat ranges with discrete values\r\n    const substatRanges = {\r\n        \"HP\": { values: [320, 407, 493, 580], min: 320, max: 580, isFlat: true },\r\n        \"ATK\": { values: [30, 40, 50, 60], min: 30, max: 60, isFlat: true },\r\n        \"DEF\": { values: [40, 50, 60, 70], min: 40, max: 70, isFlat: true },\r\n        \"HP%\": { values: [6.4, 7.1, 7.9, 8.6, 9.4, 10.1, 10.9, 11.6], min: 6.4, max: 11.6, isFlat: false },\r\n        \"ATK%\": { values: [6.4, 7.1, 7.9, 8.6, 9.4, 10.1, 10.9, 11.6], min: 6.4, max: 11.6, isFlat: false },\r\n        \"DEF%\": { values: [8.1, 9.0, 10.0, 10.9, 11.8, 12.8, 13.8, 14.7], min: 8.1, max: 14.7, isFlat: false },\r\n        \"CRIT Rate\": { values: [6.3, 6.9, 7.5, 8.1, 8.7, 9.3, 9.9, 10.5], min: 6.3, max: 10.5, isFlat: false },\r\n        \"CRIT DMG\": { values: [12.6, 13.8, 15.0, 16.2, 17.4, 18.6, 19.8, 21.0], min: 12.6, max: 21.0, isFlat: false },\r\n        \"Energy Regen\": { values: [6.8, 7.6, 8.4, 9.2, 10.0, 10.8, 11.6, 12.4], min: 6.8, max: 12.4, isFlat: false },\r\n        \"Basic Attack DMG Bonus\": { values: [6.4, 7.1, 7.9, 8.6, 9.4, 10.1, 10.9, 11.6], min: 6.4, max: 11.6, isFlat: false },\r\n        \"Heavy Attack DMG Bonus\": { values: [6.4, 7.1, 7.9, 8.6, 9.4, 10.1, 10.9, 11.6], min: 6.4, max: 11.6, isFlat: false },\r\n        \"Resonance Skill DMG Bonus\": { values: [6.4, 7.1, 7.9, 8.6, 9.4, 10.1, 10.9, 11.6], min: 6.4, max: 11.6, isFlat: false },\r\n        \"Resonance Liberation DMG Bonus\": { values: [6.4, 7.1, 7.9, 8.6, 9.4, 10.1, 10.9, 11.6], min: 6.4, max: 11.6, isFlat: false }\r\n    };\r\n\r\n    // Probability distributions for substat values\r\n    const percentStatProbabilities = [7.39, 6.90, 20.72, 24.90, 18.23, 13.60, 5.34, 2.93]; // For percentage-based stats\r\n    const flatStatProbabilities = [12.43, 46.21, 38.57, 2.79]; // For flat stats (HP, ATK, DEF)\r\n\r\n    // State for tabs\r\n    const [activeTab, setActiveTab] = useState('echoCalculator');\r\n\r\n    // State for Echo Calculator tab (Tab 1)\r\n    const [echoCost, setEchoCost] = useState(1);\r\n    const [mainStat, setMainStat] = useState(\"\");\r\n    const [selectedSubstats, setSelectedSubstats] = useState([]);\r\n    const [substatValues, setSubstatValues] = useState({});\r\n    const [results, setResults] = useState(null);\r\n    const [mainStatProb, setMainStatProb] = useState(0);\r\n    const [substatProb, setSubstatProb] = useState(0);\r\n    const [valueProb, setValueProb] = useState(0);\r\n    const [totalProb, setTotalProb] = useState(0);\r\n    const [waveplateInfo, setWaveplateInfo] = useState(null);\r\n    const [confidenceLevel, setConfidenceLevel] = useState(80);\r\n\r\n    // State for Substat Roll Calculator tab (Tab 2)\r\n    const [rollEchoCost, setRollEchoCost] = useState(1);\r\n    const [rollMainStat, setRollMainStat] = useState(\"\");\r\n    const [existingSubstats, setExistingSubstats] = useState([]);\r\n    const [existingSubstatValues, setExistingSubstatValues] = useState({});\r\n    const [desiredSubstats, setDesiredSubstats] = useState([]);\r\n    const [desiredSubstatValues, setDesiredSubstatValues] = useState({});\r\n    const [rollResults, setRollResults] = useState(null);\r\n    const [rollMainStatProb, setRollMainStatProb] = useState(0);\r\n    const [rollSubstatProb, setRollSubstatProb] = useState(0);\r\n    const [rollValueProb, setRollValueProb] = useState(0);\r\n    const [rollTotalProb, setRollTotalProb] = useState(0);\r\n    const [rollWaveplateInfo, setRollWaveplateInfo] = useState(null);\r\n    const [rollConfidenceLevel, setRollConfidenceLevel] = useState(80);\r\n\r\n    // Initialize main stat when cost changes (Tab 1)\r\n    useEffect(() => {\r\n        if (mainStatsByCost[echoCost]) {\r\n            setMainStat(mainStatsByCost[echoCost][0]);\r\n            setSelectedSubstats([]);\r\n            setSubstatValues({});\r\n            setResults(null);\r\n            setWaveplateInfo(null);\r\n        }\r\n    }, [echoCost]);\r\n\r\n    // Initialize main stat when cost changes (Tab 2)\r\n    useEffect(() => {\r\n        if (mainStatsByCost[rollEchoCost]) {\r\n            setRollMainStat(mainStatsByCost[rollEchoCost][0]);\r\n            setExistingSubstats([]);\r\n            setExistingSubstatValues({});\r\n            setDesiredSubstats([]);\r\n            setDesiredSubstatValues({});\r\n            setRollResults(null);\r\n            setRollWaveplateInfo(null);\r\n        }\r\n    }, [rollEchoCost]);\r\n\r\n    // Toggle a substat selection (Tab 1)\r\n    const toggleSubstat = (stat) => {\r\n        if (selectedSubstats.includes(stat)) {\r\n            setSelectedSubstats(selectedSubstats.filter(s => s !== stat));\r\n            const newValues = { ...substatValues };\r\n            delete newValues[stat];\r\n            setSubstatValues(newValues);\r\n        } else if (selectedSubstats.length < 5) {\r\n            setSelectedSubstats([...selectedSubstats, stat]);\r\n            setSubstatValues(prev => ({\r\n                ...prev,\r\n                [stat]: substatRanges[stat].min\r\n            }));\r\n        }\r\n    };\r\n\r\n    // Toggle an existing substat (Tab 2)\r\n    const toggleExistingSubstat = (stat) => {\r\n        if (existingSubstats.includes(stat)) {\r\n            setExistingSubstats(existingSubstats.filter(s => s !== stat));\r\n            const newValues = { ...existingSubstatValues };\r\n            delete newValues[stat];\r\n            setExistingSubstatValues(newValues);\r\n        } else if (existingSubstats.length < 5) {\r\n            setExistingSubstats([...existingSubstats, stat]);\r\n            setExistingSubstatValues(prev => ({\r\n                ...prev,\r\n                [stat]: substatRanges[stat].min\r\n            }));\r\n            if (desiredSubstats.includes(stat)) {\r\n                setDesiredSubstats(desiredSubstats.filter(s => s !== stat));\r\n                const newDesiredValues = { ...desiredSubstatValues };\r\n                delete newDesiredValues[stat];\r\n                setDesiredSubstatValues(newDesiredValues);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Toggle a desired substat (Tab 2)\r\n    const toggleDesiredSubstat = (stat) => {\r\n        const remainingSlots = 5 - existingSubstats.length;\r\n        if (desiredSubstats.includes(stat)) {\r\n            setDesiredSubstats(desiredSubstats.filter(s => s !== stat));\r\n            const newValues = { ...desiredSubstatValues };\r\n            delete newValues[stat];\r\n            setDesiredSubstatValues(newValues);\r\n        } else if (desiredSubstats.length < remainingSlots) {\r\n            setDesiredSubstats([...desiredSubstats, stat]);\r\n            setDesiredSubstatValues(prev => ({\r\n                ...prev,\r\n                [stat]: substatRanges[stat].min\r\n            }));\r\n        }\r\n    };\r\n\r\n    // Handle substat value change (Tab 1)\r\n    const handleSubstatValueChange = (stat, value, direction = null) => {\r\n        const validValues = substatRanges[stat].values;\r\n        let currentValue = parseFloat(value);\r\n\r\n        if (direction) {\r\n            const currentIndex = validValues.indexOf(substatValues[stat] || validValues[0]);\r\n            let newIndex;\r\n\r\n            if (direction === 'up') {\r\n                newIndex = Math.min(currentIndex + 1, validValues.length - 1);\r\n            } else if (direction === 'down') {\r\n                newIndex = Math.max(currentIndex - 1, 0);\r\n            }\r\n\r\n            setSubstatValues({\r\n                ...substatValues,\r\n                [stat]: validValues[newIndex]\r\n            });\r\n            return;\r\n        }\r\n\r\n        const closestValue = validValues.reduce((prev, curr) =>\r\n            Math.abs(curr - currentValue) < Math.abs(prev - currentValue) ? curr : prev\r\n        );\r\n\r\n        setSubstatValues({\r\n            ...substatValues,\r\n            [stat]: closestValue\r\n        });\r\n    };\r\n\r\n    // Handle existing substat value change (Tab 2)\r\n    const handleExistingSubstatValueChange = (stat, value, direction = null) => {\r\n        const validValues = substatRanges[stat].values;\r\n        let currentValue = parseFloat(value);\r\n\r\n        if (direction) {\r\n            const currentIndex = validValues.indexOf(existingSubstatValues[stat] || validValues[0]);\r\n            let newIndex;\r\n\r\n            if (direction === 'up') {\r\n                newIndex = Math.min(currentIndex + 1, validValues.length - 1);\r\n            } else if (direction === 'down') {\r\n                newIndex = Math.max(currentIndex - 1, 0);\r\n            }\r\n\r\n            setExistingSubstatValues({\r\n                ...existingSubstatValues,\r\n                [stat]: validValues[newIndex]\r\n            });\r\n            return;\r\n        }\r\n\r\n        const closestValue = validValues.reduce((prev, curr) =>\r\n            Math.abs(curr - currentValue) < Math.abs(prev - currentValue) ? curr : prev\r\n        );\r\n\r\n        setExistingSubstatValues({\r\n            ...existingSubstatValues,\r\n            [stat]: closestValue\r\n        });\r\n    };\r\n\r\n    // Handle desired substat value change (Tab 2)\r\n    const handleDesiredSubstatValueChange = (stat, value, direction = null) => {\r\n        const validValues = substatRanges[stat].values;\r\n        let currentValue = parseFloat(value);\r\n\r\n        if (direction) {\r\n            const currentIndex = validValues.indexOf(desiredSubstatValues[stat] || validValues[0]);\r\n            let newIndex;\r\n\r\n            if (direction === 'up') {\r\n                newIndex = Math.min(currentIndex + 1, validValues.length - 1);\r\n            } else if (direction === 'down') {\r\n                newIndex = Math.max(currentIndex - 1, 0);\r\n            }\r\n\r\n            setDesiredSubstatValues({\r\n                ...desiredSubstatValues,\r\n                [stat]: validValues[newIndex]\r\n            });\r\n            return;\r\n        }\r\n\r\n        const closestValue = validValues.reduce((prev, curr) =>\r\n            Math.abs(curr - currentValue) < Math.abs(prev - currentValue) ? curr : prev\r\n        );\r\n\r\n        setDesiredSubstatValues({\r\n            ...desiredSubstatValues,\r\n            [stat]: closestValue\r\n        });\r\n    };\r\n\r\n    // Calculate the probability of getting a value at or above the threshold\r\n    const calculateValueProbability = (stat, value) => {\r\n        const validValues = substatRanges[stat].values;\r\n        const isFlatStat = substatRanges[stat].isFlat;\r\n        const probabilities = isFlatStat ? flatStatProbabilities : percentStatProbabilities;\r\n\r\n        const thresholdIndex = validValues.indexOf(value);\r\n        if (thresholdIndex === -1) return 0;\r\n\r\n        let probability = 0;\r\n        for (let i = thresholdIndex; i < probabilities.length; i++) {\r\n            probability += probabilities[i];\r\n        }\r\n        return Math.min(probability, 100);\r\n    };\r\n\r\n    // Permutation function\r\n    const permutation = (n, k) => {\r\n        let result = 1;\r\n        for (let i = 0; i < k; i++) {\r\n            result *= (n - i);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    // Calculate probabilities (Tab 1)\r\n    const calculateProbability = () => {\r\n        let isMounted = true;\r\n\r\n        const cleanup = () => {\r\n            isMounted = false;\r\n        };\r\n\r\n        const mainStatCount = mainStatsByCost[echoCost].length;\r\n        const mainStatProbability = Math.min(1 / mainStatCount * 100, 100);\r\n\r\n        const totalSubstatOptions = allSubstats.length;\r\n        const desiredCount = selectedSubstats.length;\r\n\r\n        let substatProbability = 0;\r\n        if (desiredCount > 0) {\r\n            const totalSequences = permutation(totalSubstatOptions, 5);\r\n\r\n            let favorableSequences = 1;\r\n            favorableSequences *= permutation(5, desiredCount);\r\n            const remainingSlots = 5 - desiredCount;\r\n            for (let i = 0; i < remainingSlots; i++) {\r\n                favorableSequences *= (totalSubstatOptions - desiredCount - i);\r\n            }\r\n\r\n            substatProbability = Math.min((favorableSequences / totalSequences) * 100, 100);\r\n        } else {\r\n            substatProbability = 100;\r\n        }\r\n\r\n        let valuesProbability = 1;\r\n        for (const stat of selectedSubstats) {\r\n            const desiredValue = substatValues[stat];\r\n            const individualProb = calculateValueProbability(stat, desiredValue) / 100;\r\n            valuesProbability *= individualProb;\r\n        }\r\n        valuesProbability = Math.min(valuesProbability * 100, 100);\r\n\r\n        const totalProbability = Math.min(\r\n            (mainStatProbability / 100) *\r\n            (substatProbability / 100) *\r\n            (valuesProbability / 100) * 100,\r\n            100\r\n        );\r\n\r\n        if (isMounted) {\r\n            setMainStatProb(mainStatProbability);\r\n            setSubstatProb(substatProbability);\r\n            setValueProb(valuesProbability);\r\n            setTotalProb(totalProbability);\r\n\r\n            setResults({\r\n                mainStat: {\r\n                    name: mainStat,\r\n                    probability: mainStatProbability.toFixed(4)\r\n                },\r\n                substats: selectedSubstats.map(stat => ({\r\n                    name: stat,\r\n                    value: substatValues[stat],\r\n                    probability: calculateValueProbability(stat, substatValues[stat]).toFixed(4)\r\n                })),\r\n                substatComboProbability: substatProbability.toFixed(6),\r\n                valuesProbability: valuesProbability.toFixed(6),\r\n                totalProbability: totalProbability.toFixed(8)\r\n            });\r\n\r\n            setWaveplateInfo(null);\r\n        }\r\n\r\n        return cleanup;\r\n    };\r\n\r\n    // Calculate probabilities for rolling additional substats (Tab 2)\r\n    const calculateRollProbability = () => {\r\n        let isMounted = true;\r\n\r\n        const cleanup = () => {\r\n            isMounted = false;\r\n        };\r\n\r\n        // Main stat is already rolled, so probability is 100%\r\n        const mainStatProbability = 100;\r\n\r\n        const totalSubstatOptions = allSubstats.length;\r\n        const existingCount = existingSubstats.length;\r\n        const desiredCount = desiredSubstats.length;\r\n        const remainingSlots = 5 - existingCount;\r\n\r\n        if (desiredCount === 0) {\r\n            if (isMounted) {\r\n                setRollMainStatProb(mainStatProbability);\r\n                setRollSubstatProb(100);\r\n                setRollValueProb(100);\r\n                setRollTotalProb(100);\r\n\r\n                setRollResults({\r\n                    mainStat: {\r\n                        name: rollMainStat,\r\n                        probability: mainStatProbability.toFixed(4)\r\n                    },\r\n                    desiredSubstats: [],\r\n                    substatComboProbability: (100).toFixed(6),\r\n                    valuesProbability: (100).toFixed(6),\r\n                    totalProbability: (100).toFixed(8)\r\n                });\r\n\r\n                setRollWaveplateInfo(null);\r\n            }\r\n            return cleanup;\r\n        }\r\n\r\n        if (remainingSlots <= 0 || desiredCount > remainingSlots) {\r\n            setRollResults({\r\n                error: remainingSlots <= 0 ? \"No more substat slots available.\" : \"Desired substats exceed remaining slots.\"\r\n            });\r\n            setRollMainStatProb(0);\r\n            setRollSubstatProb(0);\r\n            setRollValueProb(0);\r\n            setRollTotalProb(0);\r\n            setRollWaveplateInfo(null);\r\n            return cleanup;\r\n        }\r\n\r\n        // Calculate substat probability using the same method as Echo Calculator\r\n        let substatProbability = 0;\r\n        if (desiredCount > 0) {\r\n            // Total sequences for the remaining rolls\r\n            const totalSequences = permutation(totalSubstatOptions - existingCount, remainingSlots);\r\n\r\n            // Favorable sequences: must include all desired substats in the remaining rolls\r\n            let favorableSequences = 1;\r\n            favorableSequences *= permutation(remainingSlots, desiredCount); // Ways to place desired substats in remaining slots\r\n            const remainingAfterDesired = remainingSlots - desiredCount;\r\n            for (let i = 0; i < remainingAfterDesired; i++) {\r\n                favorableSequences *= (totalSubstatOptions - existingCount - desiredCount - i);\r\n            }\r\n\r\n            substatProbability = Math.min((favorableSequences / totalSequences) * 100, 100);\r\n        } else {\r\n            substatProbability = 100;\r\n        }\r\n\r\n        // Calculate value probability for desired substats\r\n        let valuesProbability = 1;\r\n        for (const stat of desiredSubstats) {\r\n            const desiredValue = desiredSubstatValues[stat];\r\n            const individualProb = calculateValueProbability(stat, desiredValue) / 100;\r\n            valuesProbability *= individualProb;\r\n        }\r\n        valuesProbability = Math.min(valuesProbability * 100, 100);\r\n\r\n        // Total probability\r\n        const totalProbability = Math.min(\r\n            (mainStatProbability / 100) *\r\n            (substatProbability / 100) *\r\n            (valuesProbability / 100) * 100,\r\n            100\r\n        );\r\n\r\n        if (isMounted) {\r\n            setRollMainStatProb(mainStatProbability);\r\n            setRollSubstatProb(substatProbability);\r\n            setRollValueProb(valuesProbability);\r\n            setRollTotalProb(totalProbability);\r\n\r\n            setRollResults({\r\n                mainStat: {\r\n                    name: rollMainStat,\r\n                    probability: mainStatProbability.toFixed(4)\r\n                },\r\n                desiredSubstats: desiredSubstats.map(stat => ({\r\n                    name: stat,\r\n                    value: desiredSubstatValues[stat],\r\n                    probability: calculateValueProbability(stat, desiredSubstatValues[stat]).toFixed(4)\r\n                })),\r\n                substatComboProbability: substatProbability.toFixed(6),\r\n                valuesProbability: valuesProbability.toFixed(6),\r\n                totalProbability: totalProbability.toFixed(8)\r\n            });\r\n\r\n            setRollWaveplateInfo(null);\r\n        }\r\n\r\n        return cleanup;\r\n    };\r\n\r\n    // Format percentage\r\n    const formatPercent = (value) => {\r\n        value = Math.min(value, 100);\r\n\r\n        if (value === 100) {\r\n            return \"100%\";\r\n        } else if (value < 0.0001) {\r\n            return value.toExponential(4) + \"%\";\r\n        } else if (value < 0.01) {\r\n            return value.toFixed(6) + \"%\";\r\n        } else if (value < 1) {\r\n            return value.toFixed(4) + \"%\";\r\n        } else {\r\n            return value.toFixed(2) + \"%\";\r\n        }\r\n    };\r\n\r\n    // Calculate fraction for tooltip\r\n    const getFraction = (prob) => {\r\n        if (prob <= 0 || prob >= 100) return \"N/A\";\r\n        const denominator = Math.round(100 / prob);\r\n        return `1/${denominator}`;\r\n    };\r\n\r\n    // Calculate Waveplates\r\n    const calculateWaveplates = (probability, setWaveplateInfoFunc, confidenceLevelValue) => {\r\n        if (probability <= 0 || probability >= 100) {\r\n            setWaveplateInfoFunc({\r\n                message: \"Probability is invalid for Waveplate calculation.\"\r\n            });\r\n            return;\r\n        }\r\n\r\n        const confidence = confidenceLevelValue / 100;\r\n        if (confidence <= 0 || confidence >= 1) {\r\n            setWaveplateInfoFunc({\r\n                message: \"Confidence level must be between 0 and 100%.\"\r\n            });\r\n            return;\r\n        }\r\n\r\n        const successProbability = probability / 100;\r\n        const failureProbability = 1 - successProbability;\r\n        const failureThreshold = 1 - confidence;\r\n        const rollsNeeded = Math.ceil(Math.log(failureThreshold) / Math.log(failureProbability));\r\n\r\n        const waveplatesPerRoll = 60 / 4;\r\n        const totalWaveplates = rollsNeeded * waveplatesPerRoll;\r\n\r\n        const totalMinutes = totalWaveplates * 6;\r\n        const days = Math.floor(totalMinutes / (60 * 24));\r\n        const hours = Math.floor((totalMinutes % (60 * 24)) / 60);\r\n        const minutes = Math.floor(totalMinutes % 60);\r\n\r\n        let timeString = '';\r\n        if (days > 0) timeString += `${days} day${days !== 1 ? 's' : ''}`;\r\n        if (hours > 0) {\r\n            if (timeString) timeString += ', ';\r\n            timeString += `${hours} hour${hours !== 1 ? 's' : ''}`;\r\n        }\r\n        if (minutes > 0) {\r\n            if (timeString) timeString += ', ';\r\n            timeString += `${minutes} minute${minutes !== 1 ? 's' : ''}`;\r\n        }\r\n        if (!timeString) timeString = '0 minutes';\r\n\r\n        setWaveplateInfoFunc({\r\n            waveplates: totalWaveplates,\r\n            time: timeString,\r\n            confidence: confidenceLevelValue\r\n        });\r\n    };\r\n\r\n    // Chart data (Tab 1)\r\n    const getChartData = () => {\r\n        if (!results) return [];\r\n        return [\r\n            { name: 'Main Stat', value: parseFloat(results.mainStat.probability) },\r\n            { name: 'Substats', value: parseFloat(results.substatComboProbability) },\r\n            { name: 'Values', value: parseFloat(results.valuesProbability) }\r\n        ];\r\n    };\r\n\r\n    // Chart data (Tab 2)\r\n    const getRollChartData = () => {\r\n        if (!rollResults || rollResults.error) return [];\r\n        return [\r\n            { name: 'Main Stat', value: parseFloat(rollResults.mainStat.probability) },\r\n            { name: 'Substats', value: parseFloat(rollResults.substatComboProbability) },\r\n            { name: 'Values', value: parseFloat(rollResults.valuesProbability) }\r\n        ];\r\n    };\r\n\r\n    const CHART_COLORS = [colors.primary, colors.accent, colors.warning];\r\n\r\n    const renderCustomLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index, name }) => {\r\n        const RADIAN = Math.PI / 180;\r\n        const radius = outerRadius + 20;\r\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n        return (\r\n            <text\r\n                x={x}\r\n                y={y}\r\n                fill={colors.text}\r\n                fontSize={12}\r\n                textAnchor={x > cx ? 'start' : 'end'}\r\n                dominantBaseline=\"central\"\r\n            >\r\n                {`${name}: ${(percent * 100).toFixed(1)}%`}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    const getGradientColor = (prob, minProb, maxProb) => {\r\n        const normalized = (prob - minProb) / (maxProb - minProb);\r\n        const adjusted = Math.pow(normalized, 0.5);\r\n        const red = Math.round(255 * (1 - adjusted));\r\n        const green = Math.round(50 + (205 - 50) * adjusted);\r\n        const blue = 0;\r\n        return `rgb(${red}, ${green}, ${blue})`;\r\n    };\r\n\r\n    const percentStatsWithIndex = percentStatProbabilities.map((prob, index) => ({\r\n        prob,\r\n        index: index + 1\r\n    }));\r\n    const flatStatsWithIndex = flatStatProbabilities.map((prob, index) => ({\r\n        prob,\r\n        index: index + 1\r\n    }));\r\n\r\n    const sortedPercentProbs = [...percentStatProbabilities].sort((a, b) => a - b);\r\n    const sortedFlatProbs = [...flatStatProbabilities].sort((a, b) => a - b);\r\n\r\n    const minPercentProb = sortedPercentProbs[0];\r\n    const maxPercentProb = sortedPercentProbs[sortedPercentProbs.length - 1];\r\n    const minFlatProb = sortedFlatProbs[0];\r\n    const maxFlatProb = sortedFlatProbs[sortedFlatProbs.length - 1];\r\n\r\n    const renderProbabilityBar = (prob, minProb, maxProb, index) => (\r\n        <div key={index} style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: '50px 1fr 60px',\r\n            alignItems: 'center',\r\n            gap: '10px'\r\n        }}>\r\n            <span style={{ fontSize: '14px', color: colors.textDark }}>\r\n                Tier {index + 1}:\r\n            </span>\r\n            <div style={{ height: '20px', backgroundColor: colors.inputBg, borderRadius: '4px', position: 'relative', overflow: 'hidden' }}>\r\n                <div style={{ width: `${prob}%`, height: '100%', backgroundColor: getGradientColor(prob, minProb, maxProb), borderRadius: '4px' }} />\r\n            </div>\r\n            <span style={{ fontSize: '12px', color: colors.text, textAlign: 'right', cursor: 'pointer', position: 'relative' }}>\r\n                {formatPercent(prob)}\r\n                <div style={{\r\n                    position: 'absolute',\r\n                    top: '-30px',\r\n                    left: '50%',\r\n                    transform: 'translateX(-50%)',\r\n                    backgroundColor: colors.inputBg,\r\n                    color: colors.text,\r\n                    padding: '5px 10px',\r\n                    borderRadius: '5px',\r\n                    fontSize: '12px',\r\n                    visibility: 'hidden',\r\n                    pointerEvents: 'none'\r\n                }}\r\n                    className=\"probability-tooltip\"\r\n                >\r\n                    {getFraction(prob)}\r\n                </div>\r\n            </span>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div style={{\r\n            backgroundColor: colors.background,\r\n            color: colors.text,\r\n            fontFamily: \"'Segoe UI', sans-serif\",\r\n            minHeight: '100vh',\r\n            padding: '20px',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n        }}>\r\n            <div style={{\r\n                maxWidth: '1000px',\r\n                width: '100%',\r\n                marginBottom: '20px'\r\n            }}>\r\n                <h1 style={{\r\n                    textAlign: 'center',\r\n                    color: colors.accent,\r\n                    fontSize: '28px',\r\n                    marginBottom: '5px'\r\n                }}>\r\n                    Wuthering Waves Echo Calculator\r\n                </h1>\r\n                <h2 style={{\r\n                    textAlign: 'center',\r\n                    color: colors.primary,\r\n                    fontSize: '16px',\r\n                    fontWeight: 'normal',\r\n                    marginTop: 0\r\n                }}>\r\n                    Calculate your odds of getting the perfect Echo\r\n                </h2>\r\n\r\n                {/* Tab Navigation */}\r\n                <div style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    margin: '20px 0'\r\n                }}>\r\n                    <button\r\n                        onClick={() => setActiveTab('echoCalculator')}\r\n                        style={{\r\n                            backgroundColor: activeTab === 'echoCalculator' ? colors.buttonBg : colors.inputBg,\r\n                            color: colors.buttonText,\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            padding: '10px 20px',\r\n                            cursor: 'pointer',\r\n                            fontWeight: 'bold',\r\n                            marginRight: '10px'\r\n                        }}\r\n                    >\r\n                        Echo Calculator\r\n                    </button>\r\n                    <button\r\n                        onClick={() => setActiveTab('substatRollCalculator')}\r\n                        style={{\r\n                            backgroundColor: activeTab === 'substatRollCalculator' ? colors.buttonBg : colors.inputBg,\r\n                            color: colors.buttonText,\r\n                            border: 'none',\r\n                            borderRadius: '8px',\r\n                            padding: '10px 20px',\r\n                            cursor: 'pointer',\r\n                            fontWeight: 'bold'\r\n                        }}\r\n                    >\r\n                        Substat Roll Calculator\r\n                    </button>\r\n                </div>\r\n\r\n                {activeTab === 'echoCalculator' ? (\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        gap: '20px',\r\n                        marginTop: '30px'\r\n                    }}>\r\n                        <div style={{\r\n                            flex: 1,\r\n                            backgroundColor: colors.cardBg,\r\n                            borderRadius: '20px',\r\n                            padding: '20px',\r\n                            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n                        }}>\r\n                            <h3 style={{\r\n                                color: colors.text,\r\n                                marginTop: 0,\r\n                                marginBottom: '20px',\r\n                                fontSize: '18px'\r\n                            }}>\r\n                                Echo Parameters\r\n                            </h3>\r\n\r\n                            <div style={{ marginBottom: '20px' }}>\r\n                                <label style={{ display: 'block', marginBottom: '8px', color: colors.text }}>\r\n                                    Echo Cost:\r\n                                </label>\r\n                                <div style={{ display: 'flex', gap: '10px' }}>\r\n                                    {echoCosts.map(cost => (\r\n                                        <button\r\n                                            key={cost}\r\n                                            onClick={() => setEchoCost(cost)}\r\n                                            style={{\r\n                                                backgroundColor: echoCost === cost ? colors.buttonBg : colors.inputBg,\r\n                                                color: colors.buttonText,\r\n                                                border: 'none',\r\n                                                borderRadius: '8px',\r\n                                                padding: '8px 16px',\r\n                                                cursor: 'pointer',\r\n                                                fontWeight: echoCost === cost ? 'bold' : 'normal'\r\n                                            }}\r\n                                        >\r\n                                            {cost} Cost\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div style={{ marginBottom: '20px' }}>\r\n                                <label style={{ display: 'block', marginBottom: '8px', color: colors.text }}>\r\n                                    Main Stat:\r\n                                </label>\r\n                                <select\r\n                                    value={mainStat}\r\n                                    onChange={(e) => setMainStat(e.target.value)}\r\n                                    style={{\r\n                                        backgroundColor: colors.inputBg,\r\n                                        color: colors.text,\r\n                                        padding: '10px',\r\n                                        borderRadius: '8px',\r\n                                        border: 'none',\r\n                                        width: '100%'\r\n                                    }}\r\n                                >\r\n                                    {mainStatsByCost[echoCost]?.map(stat => (\r\n                                        <option key={stat} value={stat}>{stat}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div style={{ marginBottom: '20px' }}>\r\n                                <label style={{ display: 'block', marginBottom: '8px', color: colors.text }}>\r\n                                    Substats (select up to 5, no duplicates):\r\n                                </label>\r\n                                <div style={{\r\n                                    display: 'grid',\r\n                                    gridTemplateColumns: 'repeat(2, 1fr)',\r\n                                    gap: '10px',\r\n                                    maxHeight: '200px',\r\n                                    overflowY: 'auto',\r\n                                    padding: '5px',\r\n                                    scrollbarWidth: 'none',\r\n                                    msOverflowStyle: 'none',\r\n                                    WebkitOverflowScrolling: 'touch',\r\n                                }}>\r\n                                    <style jsx>{`\r\n                                        div::-webkit-scrollbar {\r\n                                            display: none;\r\n                                        }\r\n                                    `}</style>\r\n                                    {allSubstats.map(stat => (\r\n                                        <div\r\n                                            key={stat}\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                                backgroundColor: selectedSubstats.includes(stat) ? 'rgba(88, 166, 255, 0.2)' : 'transparent',\r\n                                                padding: '8px',\r\n                                                borderRadius: '4px',\r\n                                                cursor: selectedSubstats.includes(stat) || selectedSubstats.length >= 5 ? 'not-allowed' : 'pointer',\r\n                                                opacity: selectedSubstats.includes(stat) || selectedSubstats.length >= 5 ? 0.5 : 1\r\n                                            }}\r\n                                            onClick={() => toggleSubstat(stat)}\r\n                                        >\r\n                                            <div style={{\r\n                                                width: '16px',\r\n                                                height: '16px',\r\n                                                borderRadius: '3px',\r\n                                                border: `1px solid ${colors.textDark}`,\r\n                                                backgroundColor: selectedSubstats.includes(stat) ? colors.primary : 'transparent',\r\n                                                marginRight: '8px'\r\n                                            }} />\r\n                                            <span>{stat}</span>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {selectedSubstats.length > 0 && (\r\n                                <div style={{ marginBottom: '20px' }}>\r\n                                    <label style={{ display: 'block', marginBottom: '8px', color: colors.text }}>\r\n                                        Minimum Substat Values:\r\n                                    </label>\r\n                                    <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n                                        {selectedSubstats.map(stat => (\r\n                                            <div key={stat} style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                                <span style={{ width: '180px', fontSize: '14px' }}>{stat}:</span>\r\n                                                <div style={{ position: 'relative', display: 'flex', alignItems: 'center' }}>\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        value={substatValues[stat] || substatRanges[stat].min}\r\n                                                        onChange={(e) => handleSubstatValueChange(stat, e.target.value)}\r\n                                                        style={{\r\n                                                            backgroundColor: colors.inputBg,\r\n                                                            color: colors.text,\r\n                                                            padding: '8px',\r\n                                                            borderRadius: '8px',\r\n                                                            border: 'none',\r\n                                                            width: '80px'\r\n                                                        }}\r\n                                                    />\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '5px' }}>\r\n                                                        <button\r\n                                                            onClick={() => handleSubstatValueChange(stat, substatValues[stat], 'up')}\r\n                                                            style={{\r\n                                                                background: 'none',\r\n                                                                border: 'none',\r\n                                                                color: colors.text,\r\n                                                                cursor: 'pointer',\r\n                                                                padding: '2px',\r\n                                                                fontSize: '12px'\r\n                                                            }}\r\n                                                        >\r\n                                                            ▲\r\n                                                        </button>\r\n                                                        <button\r\n                                                            onClick={() => handleSubstatValueChange(stat, substatValues[stat], 'down')}\r\n                                                            style={{\r\n                                                                background: 'none',\r\n                                                                border: 'none',\r\n                                                                color: colors.text,\r\n                                                                cursor: 'pointer',\r\n                                                                padding: '2px',\r\n                                                                fontSize: '12px'\r\n                                                            }}\r\n                                                        >\r\n                                                            ▼\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <span style={{ fontSize: '12px', color: colors.textDark }}>\r\n                                                    Range: {substatRanges[stat].min} - {substatRanges[stat].max}\r\n                                                </span>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n\r\n                            <button\r\n                                onClick={calculateProbability}\r\n                                style={{\r\n                                    backgroundColor: colors.buttonBg,\r\n                                    color: colors.buttonText,\r\n                                    padding: '12px 24px',\r\n                                    borderRadius: '20px',\r\n                                    border: 'none',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: 'pointer',\r\n                                    width: '100%',\r\n                                    marginTop: '10px'\r\n                                }}\r\n                            >\r\n                                Calculate Probability\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div style={{\r\n                            flex: 1,\r\n                            backgroundColor: colors.cardBg,\r\n                            borderRadius: '20px',\r\n                            padding: '20px',\r\n                            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n                            display: 'flex',\r\n                            flexDirection: 'column'\r\n                        }}>\r\n                            <h3 style={{\r\n                                color: colors.text,\r\n                                marginTop: 0,\r\n                                marginBottom: '20px',\r\n                                fontSize: '18px'\r\n                            }}>\r\n                                Results\r\n                            </h3>\r\n\r\n                            {!results ? (\r\n                                <div style={{\r\n                                    flex: 1,\r\n                                    display: 'flex',\r\n                                    alignItems: 'center',\r\n                                    justifyContent: 'center',\r\n                                    color: colors.textDark,\r\n                                    textAlign: 'center',\r\n                                    padding: '20px'\r\n                                }}>\r\n                                    <p>Select your desired Echo parameters and click \"Calculate Probability\" to see results.</p>\r\n                                </div>\r\n                            ) : (\r\n                                <div style={{ flex: 1 }}>\r\n                                    <div style={{ marginBottom: '20px' }}>\r\n                                        <div style={{\r\n                                            backgroundColor: 'rgba(88, 166, 255, 0.1)',\r\n                                            padding: '15px',\r\n                                            borderRadius: '10px',\r\n                                            marginBottom: '20px',\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                            gap: '10px'\r\n                                        }}>\r\n                                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap', gap: '10px' }}>\r\n                                                <div>\r\n                                                    <h4 style={{\r\n                                                        margin: '0 0 10px 0',\r\n                                                        color: colors.accent,\r\n                                                        fontSize: '16px'\r\n                                                    }}>\r\n                                                        Total Probability\r\n                                                    </h4>\r\n                                                    <div style={{\r\n                                                        fontSize: '24px',\r\n                                                        fontWeight: 'bold',\r\n                                                        color: totalProb < 0.01 ? colors.error : colors.success,\r\n                                                        position: 'relative'\r\n                                                    }}>\r\n                                                        <span style={{ cursor: 'pointer', display: 'inline-block' }}>\r\n                                                            {formatPercent(totalProb)}\r\n                                                        </span>\r\n                                                        <div style={{\r\n                                                            position: 'absolute',\r\n                                                            top: '-30px',\r\n                                                            left: '50%',\r\n                                                            transform: 'translateX(-50%)',\r\n                                                            backgroundColor: colors.inputBg,\r\n                                                            color: colors.text,\r\n                                                            padding: '5px 10px',\r\n                                                            borderRadius: '5px',\r\n                                                            fontSize: '12px',\r\n                                                            visibility: 'hidden',\r\n                                                            pointerEvents: 'none'\r\n                                                        }}\r\n                                                            className=\"probability-tooltip\"\r\n                                                        >\r\n                                                            {getFraction(totalProb)}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div style={{ fontSize: '12px', color: colors.textDark, marginTop: '5px' }}>\r\n                                                        {totalProb < 0.0001 ?\r\n                                                            \"Extremely rare! You might need thousands of attempts.\" :\r\n                                                            totalProb < 0.01 ?\r\n                                                                \"Very rare. Good luck finding this Echo!\" :\r\n                                                                totalProb < 1 ?\r\n                                                                    \"Uncommon, but possible with dedication.\" :\r\n                                                                    \"Achievable with some persistence.\"\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                                {(echoCost === 1 || echoCost === 3) && (\r\n                                                    <div style={{ display: 'flex', alignItems: 'center', gap: '10px', flexWrap: 'wrap' }}>\r\n                                                        <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>\r\n                                                            <label style={{ fontSize: '12px', color: colors.text }}>\r\n                                                                Confidence (%):\r\n                                                            </label>\r\n                                                            <input\r\n                                                                type=\"number\"\r\n                                                                value={confidenceLevel}\r\n                                                                onChange={(e) => setConfidenceLevel(Math.max(0, Math.min(99.99, parseFloat(e.target.value) || 0)))}\r\n                                                                style={{\r\n                                                                    backgroundColor: colors.inputBg,\r\n                                                                    color: colors.text,\r\n                                                                    padding: '5px',\r\n                                                                    borderRadius: '5px',\r\n                                                                    border: 'none',\r\n                                                                    width: '60px',\r\n                                                                    fontSize: '12px'\r\n                                                                }}\r\n                                                                min=\"0\"\r\n                                                                max=\"99.99\"\r\n                                                                step=\"0.01\"\r\n                                                            />\r\n                                                        </div>\r\n                                                        <button\r\n                                                            onClick={() => calculateWaveplates(totalProb, setWaveplateInfo, confidenceLevel)}\r\n                                                            style={{\r\n                                                                backgroundColor: colors.buttonBg,\r\n                                                                color: colors.buttonText,\r\n                                                                padding: '8px 16px',\r\n                                                                borderRadius: '8px',\r\n                                                                border: 'none',\r\n                                                                fontWeight: 'bold',\r\n                                                                cursor: 'pointer',\r\n                                                                fontSize: '12px',\r\n                                                                whiteSpace: 'nowrap'\r\n                                                            }}\r\n                                                        >\r\n                                                            Approximate Needed Waveplates\r\n                                                        </button>\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            {waveplateInfo && (\r\n                                                <div style={{\r\n                                                    fontSize: '12px',\r\n                                                    color: waveplateInfo.message ? colors.error : colors.text,\r\n                                                    marginTop: '5px'\r\n                                                }}>\r\n                                                    {waveplateInfo.message ? (\r\n                                                        waveplateInfo.message\r\n                                                    ) : (\r\n                                                        `Approximate Waveplates Needed for ${waveplateInfo.confidence}% Confidence: ${waveplateInfo.waveplates} (${waveplateInfo.time})`\r\n                                                    )}\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n\r\n                                        <div style={{ marginBottom: '15px' }}>\r\n                                            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>\r\n                                                <span>Main Stat ({mainStat}):</span>\r\n                                                <span style={{ color: colors.primary, position: 'relative' }}>\r\n                                                    <span style={{ cursor: 'pointer', display: 'inline-block' }}>\r\n                                                        {formatPercent(mainStatProb)}\r\n                                                    </span>\r\n                                                    <div style={{\r\n                                                        position: 'absolute',\r\n                                                        top: '-30px',\r\n                                                        left: '50%',\r\n                                                        transform: 'translateX(-50%)',\r\n                                                        backgroundColor: colors.inputBg,\r\n                                                        color: colors.text,\r\n                                                        padding: '5px 10px',\r\n                                                        borderRadius: '5px',\r\n                                                        fontSize: '12px',\r\n                                                        visibility: 'hidden',\r\n                                                        pointerEvents: 'none'\r\n                                                    }}\r\n                                                        className=\"probability-tooltip\"\r\n                                                    >\r\n                                                        {getFraction(mainStatProb)}\r\n                                                    </div>\r\n                                                </span>\r\n                                            </div>\r\n                                            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>\r\n                                                <span>Substat Combination:</span>\r\n                                                <span style={{ color: colors.accent, position: 'relative' }}>\r\n                                                    <span style={{ cursor: 'pointer', display: 'inline-block' }}>\r\n                                                        {formatPercent(substatProb)}\r\n                                                    </span>\r\n                                                    <div style={{\r\n                                                        position: 'absolute',\r\n                                                        top: '-30px',\r\n                                                        left: '50%',\r\n                                                        transform: 'translateX(-50%)',\r\n                                                        backgroundColor: colors.inputBg,\r\n                                                        color: colors.text,\r\n                                                        padding: '5px 10px',\r\n                                                        borderRadius: '5px',\r\n                                                        fontSize: '12px',\r\n                                                        visibility: 'hidden',\r\n                                                        pointerEvents: 'none'\r\n                                                    }}\r\n                                                        className=\"probability-tooltip\"\r\n                                                    >\r\n                                                        {getFraction(substatProb)}\r\n                                                    </div>\r\n                                                </span>\r\n                                            </div>\r\n                                            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>\r\n                                                <span>Substat Value Thresholds:</span>\r\n                                                <span style={{ color: colors.warning, position: 'relative' }}>\r\n                                                    <span style={{ cursor: 'pointer', display: 'inline-block' }}>\r\n                                                        {formatPercent(valueProb)}\r\n                                                    </span>\r\n                                                    <div style={{\r\n                                                        position: 'absolute',\r\n                                                        top: '-30px',\r\n                                                        left: '50%',\r\n                                                        transform: 'translateX(-50%)',\r\n                                                        backgroundColor: colors.inputBg,\r\n                                                        color: colors.text,\r\n                                                        padding: '5px 10px',\r\n                                                        borderRadius: '5px',\r\n                                                        fontSize: '12px',\r\n                                                        visibility: 'hidden',\r\n                                                        pointerEvents: 'none'\r\n                                                    }}\r\n                                                        className=\"probability-tooltip\"\r\n                                                    >\r\n                                                        {getFraction(valueProb)}\r\n                                                    </div>\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div style={{ marginTop: '20px' }}>\r\n                                            <h4 style={{\r\n                                                margin: '0 0 10px 0',\r\n                                                color: colors.text,\r\n                                                fontSize: '14px'\r\n                                            }}>\r\n                                                Individual Substat Value Probabilities:\r\n                                            </h4>\r\n                                            <div style={{\r\n                                                display: 'flex',\r\n                                                flexDirection: 'column',\r\n                                                gap: '8px',\r\n                                                fontSize: '13px'\r\n                                            }}>\r\n                                                {results.substats.map(stat => (\r\n                                                    <div key={stat.name} style={{\r\n                                                        display: 'flex',\r\n                                                        justifyContent: 'space-between',\r\n                                                        padding: '5px 10px',\r\n                                                        backgroundColor: 'rgba(255, 255, 255, 0.05)',\r\n                                                        borderRadius: '5px'\r\n                                                    }}>\r\n                                                        <span>{stat.name} ≥ {stat.value}</span>\r\n                                                        <span style={{ color: parseFloat(stat.probability) < 50 ? colors.warning : colors.success, position: 'relative' }}>\r\n                                                            <span style={{ cursor: 'pointer', display: 'inline-block' }}>\r\n                                                                {formatPercent(parseFloat(stat.probability))}\r\n                                                            </span>\r\n                                                            <div style={{\r\n                                                                position: 'absolute',\r\n                                                                top: '-30px',\r\n                                                                left: '50%',\r\n                                                                transform: 'translateX(-50%)',\r\n                                                                backgroundColor: colors.inputBg,\r\n                                                                color: colors.text,\r\n                                                                padding: '5px 10px',\r\n                                                                borderRadius: '5px',\r\n                                                                fontSize: '12px',\r\n                                                                visibility: 'hidden',\r\n                                                                pointerEvents: 'none'\r\n                                                            }}\r\n                                                                className=\"probability-tooltip\"\r\n                                                            >\r\n                                                                {getFraction(parseFloat(stat.probability))}\r\n                                                            </div>\r\n                                                        </span>\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div style={{\r\n                                            height: '200px',\r\n                                            marginTop: '20px'\r\n                                        }}>\r\n                                            <h4 style={{\r\n                                                margin: '0 0 10px 0',\r\n                                                color: colors.text,\r\n                                                fontSize: '14px',\r\n                                                textAlign: 'center'\r\n                                            }}>\r\n                                                Probability Breakdown\r\n                                            </h4>\r\n                                            <ResponsiveContainer width=\"100%\" height=\"90%\">\r\n                                                <PieChart>\r\n                                                    <Pie\r\n                                                        data={getChartData()}\r\n                                                        dataKey=\"value\"\r\n                                                        nameKey=\"name\"\r\n                                                        cx=\"50%\"\r\n                                                        cy=\"50%\"\r\n                                                        outerRadius={70}\r\n                                                        fill=\"#8884d8\"\r\n                                                        label={renderCustomLabel}\r\n                                                        labelLine={true}\r\n                                                    >\r\n                                                        {getChartData().map((entry, index) => (\r\n                                                            <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />\r\n                                                        ))}\r\n                                                    </Pie>\r\n                                                    <Tooltip formatter={(value) => [formatPercent(value), \"Probability\"]} />\r\n                                                </PieChart>\r\n                                            </ResponsiveContainer>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        gap: '20px',\r\n                        marginTop: '30px'\r\n                    }}>\r\n                        <div style={{\r\n                            flex: 1,\r\n                            backgroundColor: colors.cardBg,\r\n                            borderRadius: '20px',\r\n                            padding: '20px',\r\n                            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n                        }}>\r\n                            <h3 style={{\r\n                                color: colors.text,\r\n                                marginTop: 0,\r\n                                marginBottom: '20px',\r\n                                fontSize: '18px'\r\n                            }}>\r\n                                Current Echo Parameters\r\n                            </h3>\r\n\r\n                            <div style={{ marginBottom: '20px' }}>\r\n                                <label style={{ display: 'block', marginBottom: '8px', color: colors.text }}>\r\n                                    Echo Cost:\r\n                                </label>\r\n                                <div style={{ display: 'flex', gap: '10px' }}>\r\n                                    {echoCosts.map(cost => (\r\n                                        <button\r\n                                            key={cost}\r\n                                            onClick={() => setRollEchoCost(cost)}\r\n                                            style={{\r\n                                                backgroundColor: rollEchoCost === cost ? colors.buttonBg : colors.inputBg,\r\n                                                color: colors.buttonText,\r\n                                                border: 'none',\r\n                                                borderRadius: '8px',\r\n                                                padding: '8px 16px',\r\n                                                cursor: 'pointer',\r\n                                                fontWeight: rollEchoCost === cost ? 'bold' : 'normal'\r\n                                            }}\r\n                                        >\r\n                                            {cost} Cost\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div style={{ marginBottom: '20px' }}>\r\n                                <label style={{ display: 'block', marginBottom: '8px', color: colors.text }}>\r\n                                    Main Stat:\r\n                                </label>\r\n                                <select\r\n                                    value={rollMainStat}\r\n                                    onChange={(e) => setRollMainStat(e.target.value)}\r\n                                    style={{\r\n                                        backgroundColor: colors.inputBg,\r\n                                        color: colors.text,\r\n                                        padding: '10px',\r\n                                        borderRadius: '8px',\r\n                                        border: 'none',\r\n                                        width: '100%'\r\n                                    }}\r\n                                >\r\n                                    {mainStatsByCost[rollEchoCost]?.map(stat => (\r\n                                        <option key={stat} value={stat}>{stat}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div style={{ marginBottom: '20px' }}>\r\n                                <label style={{ display: 'block', marginBottom: '8px', color: colors.text }}>\r\n                                    Existing Substats (select up to 5, no duplicates):\r\n                                </label>\r\n                                <div style={{\r\n                                    display: 'grid',\r\n                                    gridTemplateColumns: 'repeat(2, 1fr)',\r\n                                    gap: '10px',\r\n                                    maxHeight: '150px',\r\n                                    overflowY: 'auto',\r\n                                    padding: '5px',\r\n                                    scrollbarWidth: 'none',\r\n                                    msOverflowStyle: 'none',\r\n                                    WebkitOverflowScrolling: 'touch',\r\n                                }}>\r\n                                    <style jsx>{`\r\n                                        div::-webkit-scrollbar {\r\n                                            display: none;\r\n                                        }\r\n                                    `}</style>\r\n                                    {allSubstats.map(stat => (\r\n                                        <div\r\n                                            key={stat}\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                                backgroundColor: existingSubstats.includes(stat) ? 'rgba(88, 166, 255, 0.2)' : 'transparent',\r\n                                                padding: '8px',\r\n                                                borderRadius: '4px',\r\n                                                cursor: existingSubstats.includes(stat) || existingSubstats.length >= 5 ? 'not-allowed' : 'pointer',\r\n                                                opacity: existingSubstats.includes(stat) || existingSubstats.length >= 5 ? 0.5 : 1\r\n                                            }}\r\n                                            onClick={() => toggleExistingSubstat(stat)}\r\n                                        >\r\n                                            <div style={{\r\n                                                width: '16px',\r\n                                                height: '16px',\r\n                                                borderRadius: '3px',\r\n                                                border: `1px solid ${colors.textDark}`,\r\n                                                backgroundColor: existingSubstats.includes(stat) ? colors.primary : 'transparent',\r\n                                                marginRight: '8px'\r\n                                            }} />\r\n                                            <span>{stat}</span>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {existingSubstats.length > 0 && (\r\n                                <div style={{ marginBottom: '20px' }}>\r\n                                    <label style={{ display: 'block', marginBottom: '8px', color: colors.text }}>\r\n                                        Existing Substat Values:\r\n                                    </label>\r\n                                    <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n                                        {existingSubstats.map(stat => (\r\n                                            <div key={stat} style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                                <span style={{ width: '180px', fontSize: '14px' }}>{stat}:</span>\r\n                                                <div style={{ position: 'relative', display: 'flex', alignItems: 'center' }}>\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        value={existingSubstatValues[stat] || substatRanges[stat].min}\r\n                                                        onChange={(e) => handleExistingSubstatValueChange(stat, e.target.value)}\r\n                                                        style={{\r\n                                                            backgroundColor: colors.inputBg,\r\n                                                            color: colors.text,\r\n                                                            padding: '8px',\r\n                                                            borderRadius: '8px',\r\n                                                            border: 'none',\r\n                                                            width: '80px'\r\n                                                        }}\r\n                                                    />\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '5px' }}>\r\n                                                        <button\r\n                                                            onClick={() => handleExistingSubstatValueChange(stat, existingSubstatValues[stat], 'up')}\r\n                                                            style={{\r\n                                                                background: 'none',\r\n                                                                border: 'none',\r\n                                                                color: colors.text,\r\n                                                                cursor: 'pointer',\r\n                                                                padding: '2px',\r\n                                                                fontSize: '12px'\r\n                                                            }}\r\n                                                        >\r\n                                                            ▲\r\n                                                        </button>\r\n                                                        <button\r\n                                                            onClick={() => handleExistingSubstatValueChange(stat, existingSubstatValues[stat], 'down')}\r\n                                                            style={{\r\n                                                                background: 'none',\r\n                                                                border: 'none',\r\n                                                                color: colors.text,\r\n                                                                cursor: 'pointer',\r\n                                                                padding: '2px',\r\n                                                                fontSize: '12px'\r\n                                                            }}\r\n                                                        >\r\n                                                            ▼\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <span style={{ fontSize: '12px', color: colors.textDark }}>\r\n                                                    Range: {substatRanges[stat].min} - {substatRanges[stat].max}\r\n                                                </span>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n\r\n                            <div style={{ marginBottom: '20px' }}>\r\n                                <label style={{ display: 'block', marginBottom: '8px', color: colors.text }}>\r\n                                    Desired Substats to Roll (remaining slots: {5 - existingSubstats.length}):\r\n                                </label>\r\n                                <div style={{\r\n                                    display: 'grid',\r\n                                    gridTemplateColumns: 'repeat(2, 1fr)',\r\n                                    gap: '10px',\r\n                                    maxHeight: '150px',\r\n                                    overflowY: 'auto',\r\n                                    padding: '5px',\r\n                                    scrollbarWidth: 'none',\r\n                                    msOverflowStyle: 'none',\r\n                                    WebkitOverflowScrolling: 'touch',\r\n                                }}>\r\n                                    <style jsx>{`\r\n                                        div::-webkit-scrollbar {\r\n                                            display: none;\r\n                                        }\r\n                                    `}</style>\r\n                                    {allSubstats.map(stat => (\r\n                                        <div\r\n                                            key={stat}\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                                backgroundColor: desiredSubstats.includes(stat) ? 'rgba(255, 182, 193, 0.2)' : 'transparent',\r\n                                                padding: '8px',\r\n                                                borderRadius: '4px',\r\n                                                cursor: existingSubstats.includes(stat) || desiredSubstats.length >= (5 - existingSubstats.length) || desiredSubstats.includes(stat) ? 'not-allowed' : 'pointer',\r\n                                                opacity: existingSubstats.includes(stat) || desiredSubstats.length >= (5 - existingSubstats.length) || desiredSubstats.includes(stat) ? 0.5 : 1\r\n                                            }}\r\n                                            onClick={() => toggleDesiredSubstat(stat)}\r\n                                        >\r\n                                            <div style={{\r\n                                                width: '16px',\r\n                                                height: '16px',\r\n                                                borderRadius: '3px',\r\n                                                border: `1px solid ${colors.textDark}`,\r\n                                                backgroundColor: desiredSubstats.includes(stat) ? colors.limited : 'transparent',\r\n                                                marginRight: '8px'\r\n                                            }} />\r\n                                            <span>{stat}</span>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {desiredSubstats.length > 0 && (\r\n                                <div style={{ marginBottom: '20px' }}>\r\n                                    <label style={{ display: 'block', marginBottom: '8px', color: colors.text }}>\r\n                                        Desired Substat Minimum Values:\r\n                                    </label>\r\n                                    <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n                                        {desiredSubstats.map(stat => (\r\n                                            <div key={stat} style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                                <span style={{ width: '180px', fontSize: '14px' }}>{stat}:</span>\r\n                                                <div style={{ position: 'relative', display: 'flex', alignItems: 'center' }}>\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        value={desiredSubstatValues[stat] || substatRanges[stat].min}\r\n                                                        onChange={(e) => handleDesiredSubstatValueChange(stat, e.target.value)}\r\n                                                        style={{\r\n                                                            backgroundColor: colors.inputBg,\r\n                                                            color: colors.text,\r\n                                                            padding: '8px',\r\n                                                            borderRadius: '8px',\r\n                                                            border: 'none',\r\n                                                            width: '80px'\r\n                                                        }}\r\n                                                    />\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '5px' }}>\r\n                                                        <button\r\n                                                            onClick={() => handleDesiredSubstatValueChange(stat, desiredSubstatValues[stat], 'up')}\r\n                                                            style={{\r\n                                                                background: 'none',\r\n                                                                border: 'none',\r\n                                                                color: colors.text,\r\n                                                                cursor: 'pointer',\r\n                                                                padding: '2px',\r\n                                                                fontSize: '12px'\r\n                                                            }}\r\n                                                        >\r\n                                                            ▲\r\n                                                        </button>\r\n                                                        <button\r\n                                                            onClick={() => handleDesiredSubstatValueChange(stat, desiredSubstatValues[stat], 'down')}\r\n                                                            style={{\r\n                                                                background: 'none',\r\n                                                                border: 'none',\r\n                                                                color: colors.text,\r\n                                                                cursor: 'pointer',\r\n                                                                padding: '2px',\r\n                                                                fontSize: '12px'\r\n                                                            }}\r\n                                                        >\r\n                                                            ▼\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <span style={{ fontSize: '12px', color: colors.textDark }}>\r\n                                                    Range: {substatRanges[stat].min} - {substatRanges[stat].max}\r\n                                                </span>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n\r\n                            <button\r\n                                onClick={calculateRollProbability}\r\n                                style={{\r\n                                    backgroundColor: colors.buttonBg,\r\n                                    color: colors.buttonText,\r\n                                    padding: '12px 24px',\r\n                                    borderRadius: '20px',\r\n                                    border: 'none',\r\n                                    fontWeight: 'bold',\r\n                                    cursor: 'pointer',\r\n                                    width: '100%',\r\n                                    marginTop: '10px'\r\n                                }}\r\n                            >\r\n                                Calculate Roll Probability\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div style={{\r\n                            flex: 1,\r\n                            backgroundColor: colors.cardBg,\r\n                            borderRadius: '20px',\r\n                            padding: '20px',\r\n                            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n                            display: 'flex',\r\n                            flexDirection: 'column'\r\n                        }}>\r\n                            <h3 style={{\r\n                                color: colors.text,\r\n                                marginTop: 0,\r\n                                marginBottom: '20px',\r\n                                fontSize: '18px'\r\n                            }}>\r\n                                Roll Results\r\n                            </h3>\r\n\r\n                            {!rollResults ? (\r\n                                <div style={{\r\n                                    flex: 1,\r\n                                    display: 'flex',\r\n                                    alignItems: 'center',\r\n                                    justifyContent: 'center',\r\n                                    color: colors.textDark,\r\n                                    textAlign: 'center',\r\n                                    padding: '20px'\r\n                                }}>\r\n                                    <p>Specify your Echo's current stats and desired substats, then click \"Calculate Roll Probability\" to see results.</p>\r\n                                </div>\r\n                            ) : rollResults.error ? (\r\n                                <div style={{\r\n                                    flex: 1,\r\n                                    display: 'flex',\r\n                                    alignItems: 'center',\r\n                                    justifyContent: 'center',\r\n                                    color: colors.error,\r\n                                    textAlign: 'center',\r\n                                    padding: '20px'\r\n                                }}>\r\n                                    <p>{rollResults.error}</p>\r\n                                </div>\r\n                            ) : (\r\n                                <div style={{ flex: 1 }}>\r\n                                    <div style={{ marginBottom: '20px' }}>\r\n                                        <div style={{\r\n                                            backgroundColor: 'rgba(88, 166, 255, 0.1)',\r\n                                            padding: '15px',\r\n                                            borderRadius: '10px',\r\n                                            marginBottom: '20px',\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                            gap: '10px'\r\n                                        }}>\r\n                                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap', gap: '10px' }}>\r\n                                                <div>\r\n                                                    <h4 style={{\r\n                                                        margin: '0 0 10px 0',\r\n                                                        color: colors.accent,\r\n                                                        fontSize: '16px'\r\n                                                    }}>\r\n                                                        Total Roll Probability\r\n                                                    </h4>\r\n                                                    <div style={{\r\n                                                        fontSize: '24px',\r\n                                                        fontWeight: 'bold',\r\n                                                        color: rollTotalProb < 0.01 ? colors.error : colors.success,\r\n                                                        position: 'relative'\r\n                                                    }}>\r\n                                                        <span style={{ cursor: 'pointer', display: 'inline-block' }}>\r\n                                                            {formatPercent(rollTotalProb)}\r\n                                                        </span>\r\n                                                        <div style={{\r\n                                                            position: 'absolute',\r\n                                                            top: '-30px',\r\n                                                            left: '50%',\r\n                                                            transform: 'translateX(-50%)',\r\n                                                            backgroundColor: colors.inputBg,\r\n                                                            color: colors.text,\r\n                                                            padding: '5px 10px',\r\n                                                            borderRadius: '5px',\r\n                                                            fontSize: '12px',\r\n                                                            visibility: 'hidden',\r\n                                                            pointerEvents: 'none'\r\n                                                        }}\r\n                                                            className=\"probability-tooltip\"\r\n                                                        >\r\n                                                            {getFraction(rollTotalProb)}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div style={{ fontSize: '12px', color: colors.textDark, marginTop: '5px' }}>\r\n                                                        {rollTotalProb < 0.0001 ?\r\n                                                            \"Extremely rare! You might need thousands of attempts.\" :\r\n                                                            rollTotalProb < 0.01 ?\r\n                                                                \"Very rare. Good luck rolling these substats!\" :\r\n                                                                rollTotalProb < 1 ?\r\n                                                                    \"Uncommon, but possible with dedication.\" :\r\n                                                                    \"Achievable with some persistence.\"\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                                {(rollEchoCost === 1 || rollEchoCost === 3) && (\r\n                                                    <div style={{ display: 'flex', alignItems: 'center', gap: '10px', flexWrap: 'wrap' }}>\r\n                                                        <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>\r\n                                                            <label style={{ fontSize: '12px', color: colors.text }}>\r\n                                                                Confidence (%):\r\n                                                            </label>\r\n                                                            <input\r\n                                                                type=\"number\"\r\n                                                                value={rollConfidenceLevel}\r\n                                                                onChange={(e) => setRollConfidenceLevel(Math.max(0, Math.min(99.99, parseFloat(e.target.value) || 0)))}\r\n                                                                style={{\r\n                                                                    backgroundColor: colors.inputBg,\r\n                                                                    color: colors.text,\r\n                                                                    padding: '5px',\r\n                                                                    borderRadius: '5px',\r\n                                                                    border: 'none',\r\n                                                                    width: '60px',\r\n                                                                    fontSize: '12px'\r\n                                                                }}\r\n                                                                min=\"0\"\r\n                                                                max=\"99.99\"\r\n                                                                step=\"0.01\"\r\n                                                            />\r\n                                                        </div>\r\n                                                        <button\r\n                                                            onClick={() => calculateWaveplates(rollTotalProb, setRollWaveplateInfo, rollConfidenceLevel)}\r\n                                                            style={{\r\n                                                                backgroundColor: colors.buttonBg,\r\n                                                                color: colors.buttonText,\r\n                                                                padding: '8px 16px',\r\n                                                                borderRadius: '8px',\r\n                                                                border: 'none',\r\n                                                                fontWeight: 'bold',\r\n                                                                cursor: 'pointer',\r\n                                                                fontSize: '12px',\r\n                                                                whiteSpace: 'nowrap'\r\n                                                            }}\r\n                                                        >\r\n                                                            Approximate Needed Waveplates\r\n                                                        </button>\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            {rollWaveplateInfo && (\r\n                                                <div style={{\r\n                                                    fontSize: '12px',\r\n                                                    color: rollWaveplateInfo.message ? colors.error : colors.text,\r\n                                                    marginTop: '5px'\r\n                                                }}>\r\n                                                    {rollWaveplateInfo.message ? (\r\n                                                        rollWaveplateInfo.message\r\n                                                    ) : (\r\n                                                        `Approximate Waveplates Needed for ${rollWaveplateInfo.confidence}% Confidence: ${rollWaveplateInfo.waveplates} (${rollWaveplateInfo.time})`\r\n                                                    )}\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n\r\n                                        <div style={{ marginBottom: '15px' }}>\r\n                                            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>\r\n                                                <span>Main Stat ({rollMainStat}):</span>\r\n                                                <span style={{ color: colors.primary, position: 'relative' }}>\r\n                                                    <span style={{ cursor: 'pointer', display: 'inline-block' }}>\r\n                                                        {formatPercent(rollMainStatProb)}\r\n                                                    </span>\r\n                                                    <div style={{\r\n                                                        position: 'absolute',\r\n                                                        top: '-30px',\r\n                                                        left: '50%',\r\n                                                        transform: 'translateX(-50%)',\r\n                                                        backgroundColor: colors.inputBg,\r\n                                                        color: colors.text,\r\n                                                        padding: '5px 10px',\r\n                                                        borderRadius: '5px',\r\n                                                        fontSize: '12px',\r\n                                                        visibility: 'hidden',\r\n                                                        pointerEvents: 'none'\r\n                                                    }}\r\n                                                        className=\"probability-tooltip\"\r\n                                                    >\r\n                                                        {getFraction(rollMainStatProb)}\r\n                                                    </div>\r\n                                                </span>\r\n                                            </div>\r\n                                            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>\r\n                                                <span>Substat Combination:</span>\r\n                                                <span style={{ color: colors.accent, position: 'relative' }}>\r\n                                                    <span style={{ cursor: 'pointer', display: 'inline-block' }}>\r\n                                                        {formatPercent(rollSubstatProb)}\r\n                                                    </span>\r\n                                                    <div style={{\r\n                                                        position: 'absolute',\r\n                                                        top: '-30px',\r\n                                                        left: '50%',\r\n                                                        transform: 'translateX(-50%)',\r\n                                                        backgroundColor: colors.inputBg,\r\n                                                        color: colors.text,\r\n                                                        padding: '5px 10px',\r\n                                                        borderRadius: '5px',\r\n                                                        fontSize: '12px',\r\n                                                        visibility: 'hidden',\r\n                                                        pointerEvents: 'none'\r\n                                                    }}\r\n                                                        className=\"probability-tooltip\"\r\n                                                    >\r\n                                                        {getFraction(rollSubstatProb)}\r\n                                                    </div>\r\n                                                </span>\r\n                                            </div>\r\n                                            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>\r\n                                                <span>Substat Value Thresholds:</span>\r\n                                                <span style={{ color: colors.warning, position: 'relative' }}>\r\n                                                    <span style={{ cursor: 'pointer', display: 'inline-block' }}>\r\n                                                        {formatPercent(rollValueProb)}\r\n                                                    </span>\r\n                                                    <div style={{\r\n                                                        position: 'absolute',\r\n                                                        top: '-30px',\r\n                                                        left: '50%',\r\n                                                        transform: 'translateX(-50%)',\r\n                                                        backgroundColor: colors.inputBg,\r\n                                                        color: colors.text,\r\n                                                        padding: '5px 10px',\r\n                                                        borderRadius: '5px',\r\n                                                        fontSize: '12px',\r\n                                                        visibility: 'hidden',\r\n                                                        pointerEvents: 'none'\r\n                                                    }}\r\n                                                        className=\"probability-tooltip\"\r\n                                                    >\r\n                                                        {getFraction(rollValueProb)}\r\n                                                    </div>\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {desiredSubstats.length > 0 && (\r\n                                            <div style={{ marginTop: '20px' }}>\r\n                                                <h4 style={{\r\n                                                    margin: '0 0 10px 0',\r\n                                                    color: colors.text,\r\n                                                    fontSize: '14px'\r\n                                                }}>\r\n                                                    Desired Substat Value Probabilities:\r\n                                                </h4>\r\n                                                <div style={{\r\n                                                    display: 'flex',\r\n                                                    flexDirection: 'column',\r\n                                                    gap: '8px',\r\n                                                    fontSize: '13px'\r\n                                                }}>\r\n                                                    {rollResults.desiredSubstats.map(stat => (\r\n                                                        <div key={stat.name} style={{\r\n                                                            display: 'flex',\r\n                                                            justifyContent: 'space-between',\r\n                                                            padding: '5px 10px',\r\n                                                            backgroundColor: 'rgba(255, 255, 255, 0.05)',\r\n                                                            borderRadius: '5px'\r\n                                                        }}>\r\n                                                            <span>{stat.name} ≥ {stat.value}</span>\r\n                                                            <span style={{ color: parseFloat(stat.probability) < 50 ? colors.warning : colors.success, position: 'relative' }}>\r\n                                                                <span style={{ cursor: 'pointer', display: 'inline-block' }}>\r\n                                                                    {formatPercent(parseFloat(stat.probability))}\r\n                                                                </span>\r\n                                                                <div style={{\r\n                                                                    position: 'absolute',\r\n                                                                    top: '-30px',\r\n                                                                    left: '50%',\r\n                                                                    transform: 'translateX(-50%)',\r\n                                                                    backgroundColor: colors.inputBg,\r\n                                                                    color: colors.text,\r\n                                                                    padding: '5px 10px',\r\n                                                                    borderRadius: '5px',\r\n                                                                    fontSize: '12px',\r\n                                                                    visibility: 'hidden',\r\n                                                                    pointerEvents: 'none'\r\n                                                                }}\r\n                                                                    className=\"probability-tooltip\"\r\n                                                                >\r\n                                                                    {getFraction(parseFloat(stat.probability))}\r\n                                                                </div>\r\n                                                            </span>\r\n                                                        </div>\r\n                                                    ))}\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n\r\n                                        <div style={{\r\n                                            height: '200px',\r\n                                            marginTop: '20px'\r\n                                        }}>\r\n                                            <h4 style={{\r\n                                                margin: '0 0 10px 0',\r\n                                                color: colors.text,\r\n                                                fontSize: '14px',\r\n                                                textAlign: 'center'\r\n                                            }}>\r\n                                                Probability Breakdown\r\n                                            </h4>\r\n                                            <ResponsiveContainer width=\"100%\" height=\"90%\">\r\n                                                <PieChart>\r\n                                                    <Pie\r\n                                                        data={getRollChartData()}\r\n                                                        dataKey=\"value\"\r\n                                                        nameKey=\"name\"\r\n                                                        cx=\"50%\"\r\n                                                        cy=\"50%\"\r\n                                                        outerRadius={70}\r\n                                                        fill=\"#8884d8\"\r\n                                                        label={renderCustomLabel}\r\n                                                        labelLine={true}\r\n                                                    >\r\n                                                        {getRollChartData().map((entry, index) => (\r\n                                                            <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />\r\n                                                        ))}\r\n                                                    </Pie>\r\n                                                    <Tooltip formatter={(value) => [formatPercent(value), \"Probability\"]} />\r\n                                                </PieChart>\r\n                                            </ResponsiveContainer>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                <div style={{\r\n                    backgroundColor: colors.cardBg,\r\n                    borderRadius: '20px',\r\n                    padding: '20px',\r\n                    marginTop: '20px',\r\n                    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n                }}>\r\n                    <h3 style={{\r\n                        color: colors.text,\r\n                        marginTop: 0,\r\n                        marginBottom: '10px',\r\n                        fontSize: '18px'\r\n                    }}>\r\n                        Echo Substat Information\r\n                    </h3>\r\n                    <p style={{\r\n                        color: colors.textDark,\r\n                        fontSize: '14px',\r\n                        lineHeight: '1.5',\r\n                        margin: '0 0 10px 0'\r\n                    }}>\r\n                        • Substat ranges are the same for all Echo rarities<br />\r\n                        • Each Echo can have up to 5 substats<br />\r\n                        • Substats cannot repeat within the same Echo<br />\r\n                        • Substat values are randomly distributed according to the probability tiers shown in the game<br />\r\n                        • The calculator uses real distribution data from the game to provide accurate probability estimates\r\n                    </p>\r\n\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                        marginTop: '15px',\r\n                        padding: '10px'\r\n                    }}>\r\n                        <div style={{ width: '100%', marginBottom: '20px' }}>\r\n                            <h4 style={{\r\n                                color: colors.text,\r\n                                fontSize: '16px',\r\n                                marginBottom: '10px'\r\n                            }}>\r\n                                Percentage-Based Substats Distribution\r\n                            </h4>\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                gap: '8px'\r\n                            }}>\r\n                                {percentStatsWithIndex.map(({ prob, index }) => renderProbabilityBar(prob, minPercentProb, maxPercentProb, index - 1))}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style={{ width: '100%' }}>\r\n                            <h4 style={{\r\n                                color: colors.text,\r\n                                fontSize: '16px',\r\n                                marginBottom: '10px'\r\n                            }}>\r\n                                Flat Substats Distribution (HP, ATK, DEF)\r\n                            </h4>\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                gap: '8px'\r\n                            }}>\r\n                                {flatStatsWithIndex.map(({ prob, index }) => renderProbabilityBar(prob, minFlatProb, maxFlatProb, index - 1))}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <style jsx>{`\r\n                            .probability-tooltip {\r\n                                visibility: hidden;\r\n                            }\r\n                            span:hover .probability-tooltip {\r\n                                visibility: visible;\r\n                            }\r\n                        `}</style>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WutheringWavesEchoCalculator;","import React from 'react';\nimport WutheringWavesEchoCalculator from './WutheringWavesEchoCalculator';\n\nfunction App() {\n  return <WutheringWavesEchoCalculator />;\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}